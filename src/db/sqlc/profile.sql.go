// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: profile.sql

package main

import (
	"context"
	"database/sql"
)

const getAllProfiles = `-- name: GetAllProfiles :many
SELECT user_id, user_type, email, username, broker, name FROM profile
`

type GetAllProfilesRow struct {
	UserID   string
	UserType string
	Email    sql.NullString
	Username string
	Broker   string
	Name     sql.NullString
}

func (q *Queries) GetAllProfiles(ctx context.Context) ([]GetAllProfilesRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllProfiles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllProfilesRow
	for rows.Next() {
		var i GetAllProfilesRow
		if err := rows.Scan(
			&i.UserID,
			&i.UserType,
			&i.Email,
			&i.Username,
			&i.Broker,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProfileByUserID = `-- name: GetProfileByUserID :one
SELECT user_id, user_type, email, username, broker, name FROM profile WHERE user_id = ?
`

type GetProfileByUserIDRow struct {
	UserID   string
	UserType string
	Email    sql.NullString
	Username string
	Broker   string
	Name     sql.NullString
}

func (q *Queries) GetProfileByUserID(ctx context.Context, userID string) (GetProfileByUserIDRow, error) {
	row := q.db.QueryRowContext(ctx, getProfileByUserID, userID)
	var i GetProfileByUserIDRow
	err := row.Scan(
		&i.UserID,
		&i.UserType,
		&i.Email,
		&i.Username,
		&i.Broker,
		&i.Name,
	)
	return i, err
}

const getProfileByUsername = `-- name: GetProfileByUsername :one
SELECT user_id, user_type, email, username, broker, name FROM profile WHERE username = ?
`

type GetProfileByUsernameRow struct {
	UserID   string
	UserType string
	Email    sql.NullString
	Username string
	Broker   string
	Name     sql.NullString
}

func (q *Queries) GetProfileByUsername(ctx context.Context, username string) (GetProfileByUsernameRow, error) {
	row := q.db.QueryRowContext(ctx, getProfileByUsername, username)
	var i GetProfileByUsernameRow
	err := row.Scan(
		&i.UserID,
		&i.UserType,
		&i.Email,
		&i.Username,
		&i.Broker,
		&i.Name,
	)
	return i, err
}

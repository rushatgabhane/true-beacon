// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package db

import (
	"context"
	"database/sql"
)

const getAllUsers = `-- name: GetAllUsers :many
SELECT user_id, user_type, email, username, broker, name FROM user
`

type GetAllUsersRow struct {
	UserID   string         `json:"user_id"`
	UserType string         `json:"user_type"`
	Email    sql.NullString `json:"email"`
	Username string         `json:"username"`
	Broker   string         `json:"broker"`
	Name     sql.NullString `json:"name"`
}

func (q *Queries) GetAllUsers(ctx context.Context) ([]GetAllUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllUsersRow
	for rows.Next() {
		var i GetAllUsersRow
		if err := rows.Scan(
			&i.UserID,
			&i.UserType,
			&i.Email,
			&i.Username,
			&i.Broker,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByUserID = `-- name: GetUserByUserID :one
SELECT user_id, user_type, email, username, broker, name FROM user WHERE user_id = ?
`

type GetUserByUserIDRow struct {
	UserID   string         `json:"user_id"`
	UserType string         `json:"user_type"`
	Email    sql.NullString `json:"email"`
	Username string         `json:"username"`
	Broker   string         `json:"broker"`
	Name     sql.NullString `json:"name"`
}

func (q *Queries) GetUserByUserID(ctx context.Context, userID string) (GetUserByUserIDRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByUserID, userID)
	var i GetUserByUserIDRow
	err := row.Scan(
		&i.UserID,
		&i.UserType,
		&i.Email,
		&i.Username,
		&i.Broker,
		&i.Name,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT user_id, user_type, email, username, broker, name FROM user WHERE username = ?
`

type GetUserByUsernameRow struct {
	UserID   string         `json:"user_id"`
	UserType string         `json:"user_type"`
	Email    sql.NullString `json:"email"`
	Username string         `json:"username"`
	Broker   string         `json:"broker"`
	Name     sql.NullString `json:"name"`
}

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (GetUserByUsernameRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i GetUserByUsernameRow
	err := row.Scan(
		&i.UserID,
		&i.UserType,
		&i.Email,
		&i.Username,
		&i.Broker,
		&i.Name,
	)
	return i, err
}

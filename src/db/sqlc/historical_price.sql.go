// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: historical_price.sql

package db

import (
	"context"
	"time"
)

const addHistoricalPrice = `-- name: AddHistoricalPrice :one
INSERT INTO historical_price (
    date,
    price,
    instrument
) 
VALUES (?, ?, ?) RETURNING id, date, price, instrument
`

type AddHistoricalPriceParams struct {
	Date       time.Time `json:"date"`
	Price      int64     `json:"price"`
	Instrument string    `json:"instrument"`
}

func (q *Queries) AddHistoricalPrice(ctx context.Context, arg AddHistoricalPriceParams) (HistoricalPrice, error) {
	row := q.db.QueryRowContext(ctx, addHistoricalPrice, arg.Date, arg.Price, arg.Instrument)
	var i HistoricalPrice
	err := row.Scan(
		&i.ID,
		&i.Date,
		&i.Price,
		&i.Instrument,
	)
	return i, err
}

const getHistoricalPriceBySymbolAndDate = `-- name: GetHistoricalPriceBySymbolAndDate :many
SELECT date, price, instrument FROM historical_price
WHERE date BETWEEN ? AND ? AND instrument = ?
`

type GetHistoricalPriceBySymbolAndDateParams struct {
	Date       time.Time `json:"date"`
	Date_2     time.Time `json:"date_2"`
	Instrument string    `json:"instrument"`
}

type GetHistoricalPriceBySymbolAndDateRow struct {
	Date       time.Time `json:"date"`
	Price      int64     `json:"price"`
	Instrument string    `json:"instrument"`
}

func (q *Queries) GetHistoricalPriceBySymbolAndDate(ctx context.Context, arg GetHistoricalPriceBySymbolAndDateParams) ([]GetHistoricalPriceBySymbolAndDateRow, error) {
	rows, err := q.db.QueryContext(ctx, getHistoricalPriceBySymbolAndDate, arg.Date, arg.Date_2, arg.Instrument)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetHistoricalPriceBySymbolAndDateRow
	for rows.Next() {
		var i GetHistoricalPriceBySymbolAndDateRow
		if err := rows.Scan(&i.Date, &i.Price, &i.Instrument); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
